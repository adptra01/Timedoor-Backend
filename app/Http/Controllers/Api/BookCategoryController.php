<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\BookCategory\StoreBookCategoryRequest;
use App\Http\Requests\BookCategory\UpdateBookCategoryRequest;
use App\Http\Resources\BookCategoryResource;
use App\Models\BookCategory;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

/**
 * @tag BookCategory "Operations about book categories"
 *
 * API BookCategoryController
 * Generated by ModelSchema Enterprise Fragment Architecture
 */
class BookCategoryController extends Controller
{
    /**
     * Dapatkan Semua Kategori Buku (Terpaginasi)
     *
     * Mengambil daftar kategori buku yang sudah dipaginasi, dengan 10 item per halaman.
     */
    /**
     * Dapatkan Semua Kategori Buku (Terpaginasi)
     *
     * Mengambil daftar kategori buku yang sudah dipaginasi, dengan 10 item per halaman.
     *
     * @response 200 App\Http\Resources\BookCategoryResource[] "Paginated list of book categories"
     */
    public function index(): AnonymousResourceCollection
    {
        $bookCategories = BookCategory::paginate(10);

        return BookCategoryResource::collection($bookCategories);
    }

    /**
     * Buat Kategori Buku Baru
     *
     * Menyimpan kategori buku yang baru dibuat ke dalam database.
     */
    /**
     * Buat Kategori Buku Baru
     *
     * Menyimpan kategori buku yang baru dibuat ke dalam database.
     *
     * @body App\Http\Requests\BookCategory\StoreBookCategoryRequest "New book category data"
     *
     * @response 200 App\Http\Resources\BookCategoryResource "Created book category"
     * @response 422 App\Http\Responses\ValidationException "Validation error"
     */
    public function store(StoreBookCategoryRequest $request): BookCategoryResource
    {
        $bookCategory = BookCategory::create($request->validated());

        return new BookCategoryResource($bookCategory);
    }

    /**
     * Dapatkan Detail Kategori Buku
     *
     * Mengambil detail kategori buku tertentu berdasarkan ID.
     */
    /**
     * Dapatkan Detail Kategori Buku
     *
     * Mengambil detail kategori buku tertentu berdasarkan ID.
     *
     * @param int bookCategory "The book category ID"
     *
     * @response 200 App\Http\Resources\BookCategoryResource "Book category details"
     * @response 404 App\Http\Responses\ModelNotFoundException "Book category not found"
     */
    public function show(BookCategory $bookCategory): BookCategoryResource
    {
        return new BookCategoryResource($bookCategory);
    }

    /**
     * Perbarui Kategori Buku
     *
     * Memperbarui detail kategori buku tertentu berdasarkan ID.
     */
    /**
     * Perbarui Kategori Buku
     *
     * Memperbarui detail kategori buku tertentu berdasarkan ID.
     *
     * @param int bookCategory "The book category ID"
     *
     * @body App\Http\Requests\BookCategory\UpdateBookCategoryRequest "Updated book category data"
     *
     * @response 200 App\Http\Resources\BookCategoryResource "Updated book category"
     * @response 404 App\Http\Responses\ModelNotFoundException "Book category not found"
     * @response 422 App\Http\Responses\ValidationException "Validation error"
     */
    public function update(UpdateBookCategoryRequest $request, BookCategory $bookCategory): BookCategoryResource
    {
        $bookCategory->update($request->validated());

        return new BookCategoryResource($bookCategory);
    }

    /**
     * Hapus Kategori Buku
     *
     * Menghapus kategori buku tertentu berdasarkan ID.
     */
    /**
     * Hapus Kategori Buku
     *
     * Menghapus kategori buku tertentu berdasarkan ID.
     *
     * @param int bookCategory "The book category ID"
     *
     * @response 204 "No content"
     * @response 404 App\Http\Responses\ModelNotFoundException "Book category not found"
     */
    public function destroy(BookCategory $bookCategory): \Illuminate\Http\Response
    {
        $bookCategory->delete();

        return response()->noContent();
    }
}

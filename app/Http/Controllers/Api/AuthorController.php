<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\Author\StoreAuthorRequest;
use App\Http\Requests\Author\UpdateAuthorRequest;
use App\Http\Resources\AuthorResource;
use App\Models\Author;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Support\Facades\DB;

/**
 * API AuthorController
 * Generated by ModelSchema Enterprise Fragment Architecture
 */
class AuthorController extends Controller
{
    /**
     * Dapatkan 10 Penulis Teratas
     *
     * Mengambil daftar 10 penulis teratas berdasarkan jumlah rating di atas 5.
     */
    public function top()
    {
        $authors = DB::table('authors')
            ->select(
                'authors.id',
                'authors.name',
                DB::raw('COUNT(ratings.id) AS voters'),
                DB::raw('AVG(ratings.rating) AS avg_author_rating') // Menambahkan perhitungan rata-rata rating
            )
            ->join('books', 'books.author_id', '=', 'authors.id')
            ->join('ratings', 'ratings.book_id', '=', 'books.id')
            ->where('ratings.rating', '>', 5)
            ->groupBy('authors.id', 'authors.name')
            ->orderBy('voters', 'desc')
            ->limit(10)
            ->get();

        return response()->json($authors);
    }

    /**
     * Dapatkan Semua Penulis (Terpaginasi)
     *
     * Mengambil daftar penulis yang sudah dipaginasi, dengan 10 item per halaman.
     */
    public function index(): AnonymousResourceCollection
    {
        $authors = Author::paginate(10);

        return AuthorResource::collection($authors);
    }

    /**
     * Buat Penulis Baru
     *
     * Menyimpan penulis yang baru dibuat ke dalam database.
     */
    public function store(StoreAuthorRequest $request): AuthorResource
    {
        $author = Author::create($request->validated());

        return new AuthorResource($author);
    }

    /**
     * Dapatkan Detail Penulis
     *
     * Mengambil detail penulis tertentu berdasarkan ID.
     */
    public function show(Author $author): AuthorResource
    {
        return new AuthorResource($author);
    }

    /**
     * Perbarui Penulis
     *
     * Memperbarui detail penulis tertentu berdasarkan ID.
     */
    public function update(UpdateAuthorRequest $request, Author $author): AuthorResource
    {
        $author->update($request->validated());

        return new AuthorResource($author);
    }

    /**
     * Hapus Penulis
     *
     * Menghapus penulis tertentu berdasarkan ID.
     */
    public function destroy(Author $author): \Illuminate\Http\Response
    {
        $author->delete();

        return response()->noContent();
    }
}

<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\Author\StoreAuthorRequest;
use App\Http\Requests\Author\UpdateAuthorRequest;
use App\Http\Resources\AuthorResource;
use App\Models\Author;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Support\Facades\DB;

/**
 * API AuthorController
 * Generated by ModelSchema Enterprise Fragment Architecture
 */
class AuthorController extends Controller
{
    /**
     * Get Top 10 Authors
     *
     * Retrieves a list of the top 10 authors based on the number of ratings greater than 5.
     */
    public function top()
    {
        $authors = DB::table('authors')
            ->select('authors.id', 'authors.name', DB::raw('COUNT(ratings.id) AS voters'))
            ->join('books', 'books.author_id', '=', 'authors.id')
            ->join('ratings', 'ratings.book_id', '=', 'books.id')
            ->where('ratings.rating', '>', 5)
            ->groupBy('authors.id', 'authors.name')
            ->orderBy('voters', 'desc')
            ->limit(10)
            ->get();

        return response()->json($authors);
    }

    /**
     * Get All Authors
     *
     * Retrieves a paginated list of all authors.
     */
    public function index(): AnonymousResourceCollection
    {
        $models = Author::latest()->paginate(10);

        return AuthorResource::collection($models);
    }

    /**
     * Create New Author
     *
     * Stores a newly created author in the database.
     */
    public function store(StoreAuthorRequest $request): AuthorResource
    {
        $model = Author::create($request->validated());

        return new AuthorResource($model);
    }

    /**
     * Get Author Details
     *
     * Retrieves the details of a specific author by ID.
     */
    public function show(Author $model): AuthorResource
    {
        return new AuthorResource($model);
    }

    /**
     * Update Author
     *
     * Updates the details of a specific author by ID.
     */
    public function update(UpdateAuthorRequest $request, Author $model): AuthorResource
    {
        $model->update($request->validated());

        return new AuthorResource($model);
    }

    /**
     * Delete Author
     *
     * Deletes a specific author by ID.
     */
    public function destroy(Author $model): \Illuminate\Http\Response
    {
        $model->delete();

        return response()->noContent();
    }
}
